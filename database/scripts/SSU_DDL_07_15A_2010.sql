

Last Updated: 07/08/2010



/*----------------------------------------------------------------------------------------

Original Design: Bob Larsen

Modifications:

07/08/10 - added GREENGENES_REFERENCE table.
07/08/10 - added CONSTRAINT OTU_PICKING_FAIL_TO_SSU_SEQ_FK to OTU_PICKING_FAILURES.
07/08/10 - increase SFF_FILE.SFF_FILENAME column length to 250.
07/08/10 - added CONSTRAINT QUAL_INDEX_PK PRIMARY KEY (RUN_ID, READ_ID, POSITION).
07/08/10 - removed CONSTRAINT READ_454_TO_SAMPLE_ID_FK (relationship to SAMPLE_STUB).
07/13/10 - added RUN_DATE to the SEQUENCING_RUN table. 
07/13/10 - change the RUN_ID column name to SEQ_RUN_ID on SEQUENCING_RUN.
07/13/10 - created the OTU_PICKING_RUN_ID_SEQ Sequence.
07/13/10 - created the ANALYSIS table and associated sequence.



Add Not NULL Constraints
Add Check Constraints (like theshold)
INDEX Tablespace


-----------------------------------------------------------------------------------------*/

CREATE TABLE SFF_FILE
(
	SFF_FILE_ID		NUMBER(8),
	SFF_FILENAME		VARCHAR2(250),
	LOAD_DATE		DATE,
	NUMBER_OF_READS		NUMBER(10),
	HEADER_LENGTH		NUMBER(6),
	KEY_LENGTH		NUMBER(4),
	NUMBER_OF_FLOWS		NUMBER(5),
	FLOWGRAM_CODE		VARCHAR2(10),
	FLOW_CHARACTERS		VARCHAR2(1000),
	KEY_SEQUENCE		VARCHAR2(12),
	MD5_CHECKSUM		VARCHAR2(1000),
CONSTRAINT SFF_FILE_PK PRIMARY KEY (SFF_FILE_ID)
    USING INDEX (CREATE UNIQUE INDEX SFF_FILE_PK_IDX ON SFF_FILE(SFF_FILE_ID))
);


CREATE TABLE SEQUENCING_RUN
(
	SEQ_RUN_ID		NUMBER(12),			    -- generated by SEQ_RUN_ID_SEQ.NEXTVAL 
	INSTRUMENT_CODE		VARCHAR2(20),
	VERSION			VARCHAR2(10),
	MACHINE_ID		VARCHAR2(40)	DEFAULT 'UNKNOWN',  -- for future use - Illumina
CONSTRAINT SEQUENCING_RUN_PK PRIMARY KEY (SEQ_RUN_ID)
    USING INDEX (CREATE UNIQUE INDEX SEQUENCING_RUN_PK_IDX ON SEQUENCING_RUN(SEQ_RUN_ID))
);


CREATE TABLE SEQ_RUN_TO_SFF_FILE	--- allows for multiple SFF files associated with a RUN_ID. 
(
	SEQ_RUN_ID		NUMBER(12),
	SFF_FILE_ID		NUMBER(8),
CONSTRAINT SEQ_RUN_TO_SFF_FILE_FK FOREIGN KEY (SFF_FILE_ID) 
	REFERENCES SFF_FILE(SFF_FILE_ID),
CONSTRAINT SEQ_RUN_TO_SFF_RUN_FK FOREIGN KEY (SEQ_RUN_ID) 
	REFERENCES SEQUENCING_RUN(SEQ_RUN_ID)
);


CREATE TABLE SOURCE_TYPE
(
	SOURCE_TYPE_ID		NUMBER(2),
	SOURCE_TYPE		VARCHAR2(40),
CONSTRAINT SOURCE_TYPE_PK PRIMARY KEY (SOURCE_TYPE_ID))
ORGANIZATION INDEX;

INSERT INTO SOURCE_TYPE VALUES(1,'Sanger');
INSERT INTO SOURCE_TYPE VALUES(2,'454');	--- from Split Library Run
INSERT INTO SOURCE_TYPE VALUES(3,'Illumina');	
INSERT INTO SOURCE_TYPE VALUES(4,'Reference');
COMMIT;


CREATE TABLE REFERENCE_SET
(
	REFERENCE_SET_ID	NUMBER(2),
	REFERENCE_SET_NAME	VARCHAR2(40),	--- 'Sanger, 'Greengenes', 'De-Novo', 'qiime'  
	THRESHOLD		NUMBER(5,2), 
	VERSION			VARCHAR2(40),
CONSTRAINT REFERENCE_SET_PK PRIMARY KEY (REFERENCE_SET_ID))
ORGANIZATION INDEX;

INSERT INTO REFERENCE_SET VALUES(-1,'Not a Reference Set', 0.0, 'UNKNOWN');
INSERT INTO REFERENCE_SET VALUES( 1,'Greengenes_97',    97.0, 'UNKNOWN');
INSERT INTO REFERENCE_SET VALUES( 2,'Greengenes_98',    98.0, 'UNKNOWN');	
INSERT INTO REFERENCE_SET VALUES( 3,'Greengenes_99',    99.0, 'UNKNOWN');
INSERT INTO REFERENCE_SET VALUES( 4,'Greengenes_FULL', 100.0, 'UNKNOWN');
COMMIT;


/* INVESTIGATION - we are seeing NULL SAMPLE IDs in the FASTA File */

CREATE TABLE SSU_SEQUENCE				
(												
	SSU_SEQUENCE_ID			NUMBER(24),	--- Primary Key
	SOURCE_TYPE_ID			NUMBER(2)	CONSTRAINT NN_SOURCE_TYPE_ID NOT NULL,	
	SEQUENCE_LENGTH 		NUMBER(5)      	CONSTRAINT NN_SEQUENCE_LENGTH NOT NULL,
	SEQUENCE_STRING 		VARCHAR2(4000) 	CONSTRAINT NN_SEQUENCE_STRING NOT NULL,
CONSTRAINT SSU_SEQUENCE_PK PRIMARY KEY (SSU_SEQUENCE_ID)
   USING INDEX (CREATE UNIQUE INDEX SSU_SEQUENCE_PK_IDX ON SSU_SEQUENCE(SSU_SEQUENCE_ID)),
CONSTRAINT SOURCE_TYPE_FK FOREIGN KEY (SOURCE_TYPE_ID) REFERENCES SOURCE_TYPE(SOURCE_TYPE_ID)
);

---****
---**** CONSTRAINT UNIQUE_SEQUENCE UNIQUE SSU_SEQUENCE(SEQUENCE_STRING)
---****

CREATE TABLE SSU_SEQ_TO_REF_SET
(
	SSU_SEQUENCE_ID			NUMBER(24),	--- Primary Key is: SSU_SEQUENCE_ID, REFERENCE_SET_ID
	REFERENCE_SET_ID		NUMBER(2),
CONSTRAINT SSU_SEQ_TO_REF_SET_PK PRIMARY KEY (SSU_SEQUENCE_ID, REFERENCE_SET_ID)
   USING INDEX (CREATE UNIQUE INDEX SSU_SEQ_TO_REF_SET_PK_IDX ON SSU_SEQ_TO_REF_SET(SSU_SEQUENCE_ID, REFERENCE_SET_ID)),
CONSTRAINT REFERENCE_SET_FK FOREIGN KEY (REFERENCE_SET_ID) REFERENCES REFERENCE_SET(REFERENCE_SET_ID),
CONSTRAINT SSU_SEQUENCE_FK FOREIGN KEY (SSU_SEQUENCE_ID) REFERENCES SSU_SEQUENCE(SSU_SEQUENCE_ID)
);

CREATE TABLE SAMPLE
(
SAMPLE_ID			VARCHAR2(30),
STUFF				VARCHAR2(30),
CONSTRAINT SAMPLE_PK PRIMARY KEY (SAMPLE_ID)
  USING INDEX (CREATE UNIQUE INDEX SAMPLE_ID_PK_IDX ON SAMPLE(SAMPLE_ID))
);


CREATE TABLE READ_454
( 									--- Primary Key is: RUN_ID, READ_ID	
	SEQ_RUN_ID		NUMBER(12),				--- from load_FLOW	
	READ_ID			VARCHAR2(40), 				--- from load_FLOW	
	READ_SEQUENCE		VARCHAR2(4000),				--- from load_FLOW
	READ_SEQUENCE_LENGTH	NUMBER(5),				--- from load_FLOW			
	SSU_SEQUENCE_ID		NUMBER(24)	DEFAULT -1,		--- from load_FNA	
	SAMPLE_ID		VARCHAR2(30)	DEFAULT 'UNKNOWN',	--- from load_FNA
	BARCODE_READ_GROUP_TAB	VARCHAR2(50)	DEFAULT 'UNKNOWN',	--- currently same as SAMPLE_ID	
	ORIG_BARCODE_SEQ	VARCHAR2(24)	DEFAULT 'UNKNOWN',	--- from load_FNA	
	NEW_BARCODE_SEQ		VARCHAR2(24)	DEFAULT 'UNKNOWN',	--- from load_FNA	
	BARCODE_DIFF		NUMBER(3)	DEFAULT -1, 		--- from load_FNA
	RUN_NAME		VARCHAR2(300)	DEFAULT 'UNKNOWN',	--- from load_FLOW
	RUN_DATE		DATE		DEFAULT '01-JAN-01',	--- from load_FLOW 
	REGION 			NUMBER (1) 	DEFAULT -1, 
     	X_Location 		NUMBER(5) 	DEFAULT -1, 
     	Y_Location 		NUMBER(5) 	DEFAULT -1, 
     	FLOWGRAM_STRING		CLOB		DEFAULT 'UNKNOWN',
	FLOW_INDEX_STRING	CLOB		DEFAULT 'UNKNOWN',    
	CLIP_QUAL_LEFT		NUMBER(5)	DEFAULT -1,
	CLIP_QUAL_RIGHT		NUMBER(5)	DEFAULT -1,
	CLIP_ADAP_LEFT		NUMBER(5)	DEFAULT -1,
	CLIP_ADAP_RIGHT		NUMBER(5)	DEFAULT -1,
	QUAL_MIN		NUMBER(2)	DEFAULT -1, 
     	QUAL_MAX		NUMBER(2)	DEFAULT -1, 
     	QUAL_AVG		NUMBER(4,2)	DEFAULT -1,
	CLIPPED_SEQ_STRING	VARCHAR2(4000)  DEFAULT 'UNKNOWN',	
	CLIPPED_SEQ_LENGTH	NUMBER(5)	DEFAULT -1,					
	CLIPPED_QUAL_STRING	VARCHAR2(4000)  DEFAULT 'UNKNOWN',	--- from ???
CONSTRAINT READ_454_PK PRIMARY KEY (SEQ_RUN_ID, READ_ID) 
   USING INDEX (CREATE UNIQUE INDEX READ_454_PK_IDX ON READ_454(SEQ_RUN_ID, READ_ID)),
CONSTRAINT READ_454_TO_SSU_SEQ_ID_FK FOREIGN KEY (SSU_SEQUENCE_ID) REFERENCES SSU_SEQUENCE(SSU_SEQUENCE_ID),
CONSTRAINT READ_454_TO_SEQ_RUN_ID_FK FOREIGN KEY (SEQ_RUN_ID) REFERENCES SEQUENCING_RUN(SEQ_RUN_ID)
);


/* Add the following constraint when the "SAMPLE" table is integrated from the MetaData Schema is hooked in. */

   --- CONSTRAINT READ_454_TO_SAMPLE_ID_FK FOREIGN KEY (SAMPLE_ID) REFERENCES SAMPLE(SAMPLE_ID)


CREATE TABLE QUAL_INDEX
(
	SEQ_RUN_ID		NUMBER(12),
	READ_ID		 	VARCHAR2(40),
	POSITION	 	NUMBER(6),
	QUAL_INDEX_VALUE 	NUMBER(2),
CONSTRAINT QUAL_INDEX_PK PRIMARY KEY (SEQ_RUN_ID, READ_ID, POSITION)
   USING INDEX (CREATE UNIQUE INDEX QUAL_INDEX_PK_IDX ON QUAL_INDEX(SEQ_RUN_ID, READ_ID, POSITION)),
CONSTRAINT QUAL_INDEX_TO_READ_454_FK FOREIGN KEY (SEQ_RUN_ID, READ_ID) REFERENCES READ_454(SEQ_RUN_ID, READ_ID)
);

/*----------------------------------------------------------------------------------*/

CREATE TABLE ANALYSIS
(
	ANALYSIS_ID		NUMBER(12),
	SEQ_RUN_ID		NUMBER(12),
	SPLIT_LIBRARY_RUN_ID	NUMBER(12),	
	OTU_PICKING_RUN_ID	NUMBER(12),
	OTU_RUN_SET_ID		NUMBER(12),
	NOTES			VARCHAR2(1000),
CONSTRAINT ANALYSIS_PK PRIMARY KEY (ANALYSIS_ID)
   USING INDEX (CREATE UNIQUE INDEX ANALYSIS_PK_IDX ON ANALYSIS(ANALYSIS_ID))
);

/*----------------------------------------------------------------------------------*/

CREATE TABLE SPLIT_LIBRARY_RUN
(
	SPLIT_LIBRARY_RUN_ID	NUMBER(12),			
	SPLIT_LIBRARY_RUN_DATE	DATE,
	COMMAND			VARCHAR2(1000)	CONSTRAINT NN_SLR_COMMAND NOT NULL,
	SVN_VERSION		VARCHAR2(100)	CONSTRAINT NN_SLR_SVN_VERSION NOT NULL,
	LOG_FILE 		CLOB,		--- initially just a text file
	HISTOGRAM_FILE		CLOB,		--- initially just a text file
	MD5_CHECKSUM		VARCHAR2(1000)	CONSTRAINT NN_SLR_MD5_SUM NOT NULL
);

	
/*----------------------------------------------------------------------------------*/

CREATE TABLE GREENGENES_TAXONOMY
(
TAXON_ID		NUMBER(8)	NOT NULL,	--- from Greengenes
G2_CHIP_TAXONOMY	VARCHAR2(1000)	NOT NULL,
HUGENHOLTZ_TAXONOMY	VARCHAR2(1000)	NOT NULL,
LUDWIG_TAXONOMY		VARCHAR2(1000)	NOT NULL,
NCBI_TAXONOMY		VARCHAR2(1000)	NOT NULL,
PACE_TAXONOMY		VARCHAR2(1000)	NOT NULL,
RDP_TAXONOMY		VARCHAR2(1000)	NOT NULL
);


/*---------------- CREATE OTU Tables ----------------*/


CREATE TABLE OTU_PICKING_METHOD
(
	OTU_PICKING_METHOD_ID		NUMBER(4), 	--- generated by DB 
	OTU_PICKING_METHOD_NAME		VARCHAR2(100),
CONSTRAINT OTU_PICKING_METHOD_PK PRIMARY KEY (OTU_PICKING_METHOD_ID))
ORGANIZATION INDEX;

INSERT INTO OTU_PICKING_METHOD VALUES(1,'CDHIT');
INSERT INTO OTU_PICKING_METHOD VALUES(2,'PREFIX_SUFFIX');
INSERT INTO OTU_PICKING_METHOD VALUES(3,'MOTHUR');
INSERT INTO OTU_PICKING_METHOD VALUES(4,'TRIE');
INSERT INTO OTU_PICKING_METHOD VALUES(5,'BLAST');
INSERT INTO OTU_PICKING_METHOD VALUES(6,'UCLUST');
INSERT INTO OTU_PICKING_METHOD VALUES(7,'UCLUST_REF');

COMMIT;


CREATE TABLE OTU_RUN_SET				--- 1 run set can be associated with multiple OTU_PICKING_RUNs
(	OTU_RUN_SET_ID			NUMBER(12),	--- generated by DB (??)
	OTU_PICKING_RUN_ID				NUMBER(12),	
CONSTRAINT OTU_RUN_SET_PK PRIMARY KEY (OTU_RUN_SET_ID)
    USING INDEX (CREATE UNIQUE INDEX OTU_RUN_SET_PK_IDX ON OTU_RUN_SET(OTU_RUN_SET_ID))
);


CREATE TABLE OTU_PICKING_RUN
(
	OTU_PICKING_RUN_ID		NUMBER(12),	
	OTU_RUN_SET_ID			NUMBER(12),			
	OTU_PICKING_METHOD_ID		NUMBER(4), 	
	OTU_PICKING_DATE		DATE,		--- to milliseconds ??			
	SVN_VERSION			VARCHAR2(80),	--- what is format ?
	COMMAND				VARCHAR2(1000),
	LOG_FILE			CLOB, 		--- probably need to "pull" additional information into table
	THRESHOLD			NUMBER(5,2),	--- 97%, 98%, 99%
	MD5_SUM_INPUT_FILE		VARCHAR2(50),
CONSTRAINT OTU_PICKING_RUN_PK PRIMARY KEY (OTU_PICKING_RUN_ID)
USING INDEX (CREATE UNIQUE INDEX OTU_PICKING_RUN_PK_IDX ON OTU_PICKING_RUN(OTU_PICKING_RUN_ID)),
CONSTRAINT OTU_PICKING_METHOD_FK FOREIGN KEY (OTU_PICKING_METHOD_ID) 
    REFERENCES OTU_PICKING_METHOD(OTU_PICKING_METHOD_ID), 
CONSTRAINT OTU_RUN_SET_FK FOREIGN KEY (OTU_RUN_SET_ID) 
    REFERENCES OTU_RUN_SET(OTU_RUN_SET_ID) 
);


CREATE TABLE OTU_PICKING_FAILURES
(
	OTU_PICKING_RUN_ID		NUMBER(12),	--- integer value from OTU_PICKING_RUN 
	SSU_SEQUENCE_ID			NUMBER(24),	--- FOREIGN KEY - integer value from SEQUENCE_ID table				
CONSTRAINT OTU_PICKING_FAILURES_FK FOREIGN KEY (OTU_PICKING_RUN_ID) 
    REFERENCES OTU_PICKING_RUN(OTU_PICKING_RUN_ID),	
CONSTRAINT OTU_PICKING_FAIL_TO_SSU_SEQ_FK FOREIGN KEY (SSU_SEQUENCE_ID) REFERENCES SSU_SEQUENCE(SSU_SEQUENCE_ID) 	
);


CREATE TABLE OTU
(
	OTU_ID				NUMBER(12),	--- generated by DB 
	TAXON_ID			NUMBER(16),	--- hook to Unaligned Taxon data from Daniel
CONSTRAINT OTU_PK PRIMARY KEY (OTU_ID)
    USING INDEX (CREATE UNIQUE INDEX OTU_ID_PK_IDX ON OTU(OTU_ID))
);


CREATE TABLE OTU_MAP					--- 1 OTU is associated with many SEQUENCE IDs.
(
	OTU_ID				NUMBER(12),	--- integer value from OTU table
	OTU_RUN_SET_ID		NUMBER(12),	--- INPUT VALUE
	SSU_SEQUENCE_ID			NUMBER(24),	
CONSTRAINT OTU_MAP_TO_OTU_FK FOREIGN KEY (OTU_ID) REFERENCES OTU(OTU_ID),
constraint otu_map_to_otu_run_set_fk foreign key (otu_run_set_id) references otu_run_set (otu_run_set_id),
CONSTRAINT OTU_MAP_TO_SSU_SEQUENCE_FK FOREIGN KEY (SSU_SEQUENCE_ID) REFERENCES SSU_SEQUENCE(SSU_SEQUENCE_ID) 
);


/*------------ FUTURE Tables ------------*/


CREATE TABLE READ_SANGER
(
	READ_ID 		VARCHAR2(40)
	RUN_NAME		VARCHAR2(300)	DEFAULT 'UNKNOWN', 	
	RUN_DATE		DATE		DEFAULT '01-JAN-01',
	BASES			VARCHAR2(2000)	DEFAULT 'UNKNOWN',
);

CREATE TABLE READ_ILLUMINA
( 
	RUN_ID			NUMBER(12),	--- Primary Key is: RUN_ID, READ_ID		
	READ_ID			VARCHAR2(40), 	
	SSU_SEQUENCE_ID		NUMBER(24),	
	RUN_NAME		VARCHAR2(300)	DEFAULT 'UNKNOWN', 	--- per sequence, can be multiple runs
	RUN_DATE		DATE		DEFAULT '01-JAN-01',	--- per sequence, can be multiple runs
	ORIG_BARCODE_SEQ	VARCHAR2(24)	DEFAULT 'UNKNOWN',	
	NEW_BARCODE_SEQ		VARCHAR2(24)	DEFAULT 'UNKNOWN',	
	BARCODE_DIFF		NUMBER(3)	DEFAULT -1, 	
	MACHINE_NAME		VARCHAR2(100)	DEFAULT 'UNKNOWN',		
	CHANNEL_NUMBER		NUMBER(1)	DEFAULT -1,
	TILE_NUMBER		NUMBER(3)	DEFAULT -1,
     	X_Location 		NUMBER(5) 	DEFAULT -1, 
     	Y_Location 		NUMBER(5) 	DEFAULT -1, 
     	NUM_BASES		NUMBER(5)	DEFAULT -1,
	BASES			VARCHAR2(2000)	DEFAULT 'UNKNOWN',
     	FLOWGRAM_STRING		CLOB,
	FLOW_INDEX_STRING	CLOB,      
	CLIP_QUAL_LEFT		NUMBER(5)	DEFAULT -1,
	CLIP_QUAL_RIGHT		NUMBER(5)	DEFAULT -1,
	CLIP_ADAP_LEFT		NUMBER(5)	DEFAULT -1,
	CLIP_ADAP_RIGHT		NUMBER(5)	DEFAULT -1,
	QUAL_MIN		NUMBER(2)	DEFAULT -1, 
     	QUAL_MAX		NUMBER(2)	DEFAULT -1, 
     	QUAL_AVG		NUMBER(4,2)	DEFAULT -1,
	CLIPPED_SEQ_STRING	VARCHAR2(4000),
	CLIPPED_QUAL_STRING	VARCHAR2(4000),
CONSTRAINT READ_ILLUMINA_PK PRIMARY KEY (RUN_ID, READ_ID) 
   USING INDEX (CREATE UNIQUE INDEX READ_ILLUMINA_PK_IDX ON READ_ILLUMINA(RUN_ID, READ_ID)),
CONSTRAINT READ_ILLUMINA_TO_SSU_SEQ_ID_FK FOREIGN KEY (SSU_SEQUENCE_ID) REFERENCES SSU_SEQUENCE(SSU_SEQUENCE_ID)
);

CREATE TABLE SSU_DENOISED_SEQUENCE
(
	DENOISED_SEQUENCE_ID		NUMBER(24),
	DEMULTIPLEXED_SEQUENCE_ID	NUMBER(24),  
	NEW_SEQUENCE_LENGTH 		NUMBER(5),
	NEW_SEQUENCE_STRING 		VARCHAR2(4000) 
);


CREATE TABLE SEQUENCE		--- metagenomic reads
(
	RUN_ID		 	NUMBER(12),
	READ_ID		 	VARCHAR2(40),
CONSTRAINT SEQUENCE_PK PRIMARY KEY (RUN_ID, READ_ID) 
   USING INDEX (CREATE UNIQUE INDEX SEQUENCE_PK_IDX ON SEQUENCE(RUN_ID, READ_ID))
);

/*------------ CREATE Temporary Tables ------------*/

CREATE GLOBAL TEMPORARY TABLE TEMP_READ_454
( 
	SEQ_RUN_ID		NUMBER(12),	
	READ_ID			VARCHAR2(40), 
	READ_SEQUENCE		VARCHAR2(4000),
	READ_SEQUENCE_LENGTH	NUMBER(5),
	SSU_SEQUENCE_ID		NUMBER(24)	DEFAULT -1, 	
	SAMPLE_ID		VARCHAR2(30)	DEFAULT 'UNKNOWN',
	BARCODE_READ_GROUP_TAB	VARCHAR2(50)	DEFAULT 'UNKNOWN',	
     	ORIG_BARCODE_SEQ	VARCHAR2(24)	DEFAULT 'UNKNOWN',	
	NEW_BARCODE_SEQ		VARCHAR2(24)	DEFAULT 'UNKNOWN',	
	BARCODE_DIFF		NUMBER(3)	DEFAULT -1, 
	RUN_NAME		VARCHAR2(300)   DEFAULT 'UNKNOWN',
	RUN_DATE		DATE		DEFAULT '01-JAN-01',
	REGION 			NUMBER (1) 	DEFAULT -1, 
     	X_Location 		NUMBER(5) 	DEFAULT -1, 
     	Y_Location 		NUMBER(5) 	DEFAULT -1, 
     	FLOWGRAM_STRING		CLOB		DEFAULT 'UNKNOWN',
	FLOW_INDEX_STRING	CLOB		DEFAULT 'UNKNOWN',      
	CLIP_QUAL_LEFT		NUMBER(5)	DEFAULT -1,
	CLIP_QUAL_RIGHT		NUMBER(5)	DEFAULT -1,
	CLIP_ADAP_LEFT		NUMBER(5)	DEFAULT -1,
	CLIP_ADAP_RIGHT		NUMBER(5)	DEFAULT -1,
	QUAL_MIN		NUMBER(2)	DEFAULT -1, 
     	QUAL_MAX		NUMBER(2)	DEFAULT -1, 
     	QUAL_AVG		NUMBER(4,2)	DEFAULT -1,
	CLIPPED_SEQ_STRING	VARCHAR2(4000) 	DEFAULT 'UNKNOWN',
	CLIPPED_SEQ_LENGTH	NUMBER(5)	DEFAULT -1,	
	CLIPPED_QUAL_STRING	VARCHAR2(4000) 	DEFAULT 'UNKNOWN'
) ON COMMIT PRESERVE ROWS;


/*------ Create Sequences ------*/

CREATE SEQUENCE  ANALYSIS_ID_SEQ 
MINVALUE 1 MAXVALUE 999999999999 
INCREMENT BY 1 
START WITH 1
NOCACHE  ORDER  NOCYCLE;

CREATE SEQUENCE  FILE_ID_SEQ 
MINVALUE 1 MAXVALUE 999999999999 
INCREMENT BY 1 
START WITH 1
NOCACHE  ORDER  NOCYCLE;

CREATE SEQUENCE OTU_ID_SEQ
MINVALUE 1 MAXVALUE 999999999999
INCREMENT BY 1 
START WITH 1 
NOCACHE ORDER  NOCYCLE;

CREATE SEQUENCE OTU_PICKING_RUN_ID_SEQ
MINVALUE 1 MAXVALUE 999999999999
INCREMENT BY 1 
START WITH 1 
NOCACHE ORDER  NOCYCLE;

CREATE SEQUENCE SEQ_RUN_ID_SEQ 
MINVALUE 1 MAXVALUE 999999999999
INCREMENT BY 1 
START WITH 1
NOCACHE  ORDER  NOCYCLE;

CREATE SEQUENCE SPLIT_LIBRARY_RUN_ID_SEQ
MINVALUE 1 MAXVALUE 999999999999
INCREMENT BY 1 
START WITH 1 
NOCACHE ORDER  NOCYCLE;

CREATE SEQUENCE SSU_SEQUENCE_ID_SEQ
MINVALUE 1 MAXVALUE 999999999999
INCREMENT BY 1 
START WITH 1 
CACHE 20 ORDER  NOCYCLE;

/*----------------------------------------------------------------------------------------------------------------------*/

CREATE TABLE GREENGENES_REFERENCE
(
	REFERENCE_SET_ID	NUMBER(2),	
	PROK_MSA_ID		VARCHAR2(40)	CONSTRAINT NN_PROK_MSA_ID NOT NULL, 
	SSU_SEQUENCE_ID		NUMBER(24),		
	TAXON_ID		VARCHAR2(400)	CONSTRAINT NN_TAXON_ID NOT NULL, 
	CORE_SET_MEMBER		NUMBER(12)	CONSTRAINT NN_CORE_SET_MEMBER NOT NULL,
	QUAL_SCORES		VARCHAR2(2000),
CONSTRAINT GREENGENES_REFERENCE_PK PRIMARY KEY (REFERENCE_SET_ID, PROK_MSA_ID) 
   USING INDEX (CREATE UNIQUE INDEX GREENGENES_REFERENCE_PK_IDX ON GREENGENES_REFERENCE(REFERENCE_SET_ID, PROK_MSA_ID)),
CONSTRAINT GG_REFERENCE_TO_SSU_SEQ_FK FOREIGN KEY (SSU_SEQUENCE_ID) REFERENCES SSU_SEQUENCE(SSU_SEQUENCE_ID)
);


---CONSTRAINT GREENGENES_REF_TO_READ_454_FK FOREIGN KEY (REFERENCE_SET_ID, PROK_MSA_ID) REFERENCES READ_454(RUN_ID, READ_ID)

