<!--
__author__ = "Jesse Stombaugh"
__copyright__ = "Copyright 2009-2010, Qiime Web Analysis"
__credits__ = ["Doug Wendel", "Jesse Stombaugh"]
__license__ = "GPL"
__version__ = "1.0.0.dev"
__maintainer__ = ["Doug Wendel", "Jesse Stombaugh"]
__email__ = "jesse.stombaugh@colorado.edu"
__status__ = "Production"
-->

<script type="text/javascript">

$.validator.setDefaults({
    submitHandler:function(){
        qiime_parameters.submit();
    }
});

$.metadata.setType("attr","validate");
    
$(document).ready(function(){
    $("#qiime_parameters").validate();
});
</script>

<form id="qiime_parameters" name="qiime_parameters" action="fusebox.psp" method="post">
<input type="hidden" name="page" id="page" value="qiime_submission.psp">

<table>
<tr>

<%
column_names=[]
sample_categories=[]
for form_id in form:    
    if form_id != 'page':
        sess[form_id]=form[form_id]

sess.save()

'''OTU Picking Parameters'''
data_access = QiimeDataAccess();

#OTU Picking Method
db_values = data_access.getParameterByScript('\'otu_picking_method\'','\'pick_otus\'')
req.write("<td>")
req.write('OTU Picking Method:<select validate="required:true, minlength:1" name="pick_otus:otu_picking_method" id="pick_otus:otu_picking_method">\n')
for item in db_values:
    req.write('<option value="' + item + '">' + item + '</option>\n')
req.write('</select></td>')

#Clustering Algorithm
db_values = data_access.getParameterByScript()
con.cursor().callproc('get_parameter_by_script',['\'clustering_algorithm\'','\'pick_otus\'',db_values])
req.write("<td>")
req.write('Clustering Algorithm:<select validate="required:true, minlength:1" name="pick_otus:clustering_algorithm" id="pick_otus:clustering_algorithm">\n')
for item in db_values:
    req.write('<option value="' + item + '">' + item + '</option>\n')
req.write('</select>\n</td>\n')

'''
#Maximum cd-hit memory
db_values = data_access.getParameterByScript('\'max_cdhit_memory\'','\'pick_otus\'')
req.write("<td>\n")
req.write('Max Cd-Hit Memory:<input validate="required:true, max:400,digits:true" name="pick_otus:max_cdhit_memory" id="pick_otus:max_cdhit_memory" value=')
for item in db_values:
    req.write(item + ' \>\n')
req.write("</td>\n")

'''

#Sequence Similarity
db_values = data_access.getParameterByScript('\'similarity\'','\'pick_otus\'')
req.write("<td>\n")
req.write('Sequence Similarity:<input validate="required:true, min:0.01, max:1.00, number:true" name="pick_otus:similarity" id="pick_otus:similarity" value=')
for item in db_values:
    req.write(item + ' \>\n')
req.write("</td>\n")

#Max E-Value
db_values = data_access.getParameterByScript('\'max_e_value\'','\'pick_otus\'')
req.write("<td>\n")
req.write('Max e-value:<input validate="required:true, min:0.000000000001, max:1.00, number:true" name="pick_otus:max_e_value" id="pick_otus:max_e_value" value=')
for item in db_values:
    req.write(item + ' \>\n')
req.write("</td>\n")

#Prefix length
db_values = data_access.getParameterByScript('\'prefix_length\'','\'pick_otus\'')
req.write("<td>\n")
req.write('Prefix Length:<input validate="required:true, digits:true" name="pick_otus:prefix_length" id="pick_otus:prefix_length" value=')
for item in db_values:
    req.write(item + ' \>\n')
req.write("</td>\n")

#Suffix length
db_values = data_access.getParameterByScript('\'suffix_length\'','\'pick_otus\'')
req.write("<td>\n")
req.write('Suffix length:<input validate="required:true, digits:true" name="pick_otus:suffix_length" id="pick_otus:suffix_length" value=')
for item in db_values:
    req.write(item + ' \>\n')
req.write("</td>\n")

#Prefix Prefilter length
db_values = data_access.getParameterByScript('\'prefix_prefilter_length\'','\'pick_otus\'')
req.write("<td>\n")
req.write('Prefix Prefilter Length:<input validate="required:true, digits:true" name="pick_otus:prefix_prefilter_length" id="pick_otus:prefix_prefilter_length" value=')
for item in db_values:
    req.write(item + ' \>\n')
req.write("</td>\n")

#Trie Prefilter
db_values = data_access.getParameterByScript('\'trie_prefilter\'','\'pick_otus\'')
req.write("<td>")
req.write('Trie Prefilter:<select validate="required:true, minlength:1" name="pick_otus:trie_prefilter" id="pick_otus:trie_prefilter">\n')
for item in db_values:
    req.write('<option value="' + item + '">' + item + '</option>\n')
req.write('</select>\n</td>\n')

req.write("</tr>\n")

'''Picking Representative Sequence Set'''

req.write("<tr>\n")

#Pick Representative Set Method
db_values = data_access.getParameterByScript('\'rep_set_picking_method\'','\'pick_rep_set\'')
req.write("<td>")
req.write('Pick Representative Set Method:<select validate="required:true, minlength:1" name="pick_rep_set:rep_set_picking_method" id="pick_rep_set:rep_set_picking_method">\n')
for item in db_values:
    req.write('<option value="' + item + '">' + item + '</option>\n')
req.write('</select>\n</td>\n')

#Sort By Method
db_values = data_access.getParameterByScript('\'sort_by\'','\'pick_rep_set\'')
req.write("<td>")
req.write('Sort By:<select validate="required:true, minlength:1" name="pick_rep_set:sort_by" id="pick_rep_set:sort_by">\n')
for item in db_values:
    req.write('<option value="' + item + '">' + item + '</option>\n')
req.write('</select>\n</td>\n')

req.write("</tr>\n")

'''Sequence Alignment'''

req.write("<tr>\n")

#Alignment Method
db_values = data_access.getParameterByScript('\'alignment_method\'','\'align_seqs\'')
req.write("<td>")
req.write('Sequence Alignment Method:<select validate="required:true, minlength:1" name="align_seqs:alignment_method" id="align_seqs:alignment_method">\n')
for item in db_values:
    req.write('<option value="' + item + '">' + item + '</option>\n')
req.write('</select>\n</td>\n')

#Pairwise Alignment Method
db_values = data_access.getParameterByScript('\'pairwise_alignment_method\'','\'align_seqs\'')
req.write("<td>")
req.write('Pairwise Alignment Method:<select validate="required:true, minlength:1" name="align_seqs:pairwise_alignment_method" id="align_seqs:pairwise_alignment_method">\n')
for item in db_values:
    req.write('<option value="' + item + '">' + item + '</option>\n')
req.write('</select>\n</td>\n')

#Minimum Sequence Length
db_values = data_access.getParameterByScript('\'min_length\'','\'align_seqs\'')
req.write("<td>\n")
req.write('Minimum Sequence Length:<input validate="required:true, digits:true" name="align_seqs:min_length" id="align_seqs:min_length" value=')
for item in db_values:
    req.write(item + ' \>\n')
req.write("</td>\n")

#Minimum Percent Identity
db_values = data_access.getParameterByScript('\'min_percent_id\'','\'align_seqs\'')
req.write("<td>\n")
req.write('Minimum Percent Identity:<input validate="required:true, number:true,min:0.01,max:100.00" name="align_seqs:min_percent_id" id="align_seqs:min_percent_id" value=')
for item in db_values:
    req.write(item + ' \>\n')
req.write("</td>\n")

req.write("</tr>\n")

'''Filter Alignment'''
req.write("<tr>\n")

#Assign Gap Fraction
db_values = data_access.getParameterByScript('\'allowed_gap_frac\'','\'filter_alignment\'')
req.write("<td>\n")
req.write('Gap Fraction:<input validate="required:true, number:true,min:0.01,max:1.00" name="filter_alignment:allowed_gap_frac" id="filter_alignment:allowed_gap_frac" value=')
for item in db_values:
    req.write(item + ' \>\n')
req.write("</td>\n")

req.write("</tr>\n")

'''Assign Taxonomy'''
req.write("<tr>\n")

#Pairwise Alignment Method
db_values = data_access.getParameterByScript('\'assignment_method\'','\'assign_taxonomy\'')
req.write("<td>")
req.write('Assign Taxonomy Method:<select validate="required:true, minlength:1" name="assign_taxonomy:assignment_method" id="assign_taxonomy:assignment_method">\n')
for item in db_values:
    req.write('<option value="' + item + '">' + item + '</option>\n')
req.write('</select>\n</td>\n')

#Assign Gap Fraction
db_values = data_access.getParameterByScript('\'confidence\'','\'assign_taxonomy\'')
req.write("<td>\n")
req.write('Confidence:<input validate="required:true, number:true,min:0.01,max:1.00" name="assign_taxonomy:confidence" id="assign_taxonomy:confidence" value=')
for item in db_values:
    req.write(item + ' \>\n')
req.write("</td>\n")

#Max E-Value
db_values = data_access.getParameterByScript('\'e_value\'','\'assign_taxonomy\'')
req.write("<td>\n")
req.write('Max e-value:<input validate="required:true, min:0.000000000001, max:1.00, number:true" name="assign_taxonomy:e_value" id="assign_taxonomy:e_value" value=')
for item in db_values:
    req.write(item + ' \>\n')
req.write("</td>\n")

req.write("</tr>\n")

'''Make Phylogeny'''
req.write("<tr>\n")

#Tree Method
db_values = data_access.getParameterByScript('\'tree_method\'','\'make_phylogeny\'')
req.write("<td>")
req.write('Tree Building Method:<select validate="required:true, minlength:1" name="make_phylogeny:tree_method" id="make_phylogeny:tree_method">\n')
for item in db_values:
    req.write('<option value="' + item + '">' + item + '</option>\n')
req.write('</select>\n</td>\n')
%>

</table>
<input type="submit" value="Submit Job">
</form>

