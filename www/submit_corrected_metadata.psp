<%
__author__ = "Doug Wendel"
__copyright__ = "Copyright 2009-2010, Qiime Web Analysis"
__credits__ = ["Doug Wendel"]
__license__ = "GPL"
__version__ = "1.0.0.dev"
__maintainer__ = ["Doug Wendel"]
__email__ = "wendel@colorado.edu"
__status__ = "Development"
%>

<h3>Please wait while values are written to the database...</h3>

<%
# The obligatory data access import
from qiime_data_access import *
from metadata_worker import *
import threading
from time import sleep

# Gather all fields for submission
study_name = sess['study_name']
study_id = sess['study_id']

# Get our data_access instance
data_access = QiimeDataAccess()

# Remove any existing metadata before upload. 0 = delete all but study specific data
data_access.deleteStudy(study_id, 0)

sample_key_fields = {}
prep_key_fields = {}
host_key_fields = {}

key_field = None
with_errors = False

host_fields = []
prep_fields = []
all_other_fields = []

# Make one pass to shuffle all fields into the right buckets
req.write('<p style="font-size:12px">Writing Sample Key Values:</p>')

for item in form:
    parts = item.split(':')
    
    # Not a metadata field if length of parts is wrong
    if len(parts) != 4:
        continue
    
    # Sort the parts into more meaningful variable names
    field_type = parts[0]
    row_num = parts[1]
    field_name = parts[3]
    field_value = form[item]
    
    # Skip the project name field here since we absolutely don't want to
    # change the name the user typed when creating their study. This value
    # may show up in some legacy files or could be added by the user at a
    # later time. 
    if field_name.upper() == 'PROJECT_NAME':
        continue
    
    # Sample key rows can be inserted now
    if  field_type == 'sample' and field_name == 'sample_name':
        data_access.createSampleKey(study_id, field_value)
        sample_key_fields[row_num] = field_value
        req.write('* ')
    # Host rows will be written after all samples are in place
    elif field_type == 'sample' and field_name == 'host_subject_id':
        host_fields.append(item)
        host_key_fields[row_num] = field_value
    # Prep rows will be written once all sample rows are in place
    elif field_type == 'prep' and field_name == 'sample_name':
        prep_fields.append(item)
        prep_key_fields[row_num] = field_value
    # All other fields will be inserted in step 3
    else:
        all_other_fields.append(item)

req.write('<p style="font-size:12px">Writing Prep Key Values:</p>')

# Insert the prep key rows now that sample rows all exist
for item in prep_fields:
    field_value = form[item]
    row_num = item.split(':')[1]
    data_access.createPrepKey(study_id, field_value, row_num)
    req.write('* ')

# Insert the host key rows now that sample rows all exist
if len(host_fields) > 0:
    req.write('<p style="font-size:12px">Writing Host Key Values:</p>')
    for item in host_fields:
        parts = item.split(':')
        row_num = parts[1]
        field_value = form[item]
        sample_name = sample_key_fields[row_num]
        data_access.createHostKey(study_id, sample_name, field_value)
        req.write('* ')

req.write('<p style="font-size:12px">Writing Metadata Values (this may take a while):</p>')

# To hold the current bucket of metadata values
item_list = []
threads = []
thread_count = 1

# Sets the number of metadata fields to be processed by each thread
bucket_size = len(all_other_fields) / thread_count

# Define the thread callback
def _callback(self, message):
    req.write(message)

# Go workers go!
req.write('<p style="font-size:9px">')
delimiter = 0
for item in all_other_fields:
    # Fill a bucket and pass off to worker
    if len(item_list) == bucket_size:
        t = MetadataWorkerThread(req, form, item_list, sample_key_fields, prep_key_fields, host_key_fields, study_name, study_id, str(delimiter) + ' ', data_access)
        threads.append(t)
        req.write('^ ')
        t.start()
        item_list = []
        delimiter += 1
    else:
        item_list.append(item)

# If there are any items left, process those last
if len(item_list) > 0:
    delimiter += 1
    t = MetadataWorkerThread(req, form, item_list, sample_key_fields, prep_key_fields, host_key_fields, study_name, study_id, str(delimiter) + ' ', data_access)
    threads.append(t)
    req.write('^<br/>')
    t.start()

for t in threads:
    t.join()

req.write('</p>')

if with_errors:
    req.write('<h3>Upload Completed With Errors</h3>')
    req.write('<p style="font-size:12px">You should review the errors above, make the appropriate adjustments to your metadata files, then re-submit them to your study.</p>')
    
    # Update the database flag for the failed upload
    data_access.updateMetadataFlag(study_id, 'n')
else:
    req.write('<h3>Upload Completed!</h3>')
    req.write('<p style="font-size:8px">yahoo!</p>')
    req.write('<img src="img/firework3.gif"/>')
    
    # Update the database flag for successful metadata upload
    data_access.updateMetadataFlag(study_id, 'y')

# end if/else
%>
