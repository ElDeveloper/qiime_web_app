<%
#!/usr/bin/env python

__author__ = "Jesse Stombaugh"
__copyright__ = "Copyright 2010, Qiime Web Analysis"
__credits__ = ["Jesse Stombaugh"]
__license__ = "GPL"
__version__ = "1.0.0.dev"
__maintainer__ = ["Jesse Stombaugh"]
__email__ = "jesse.stombaugh@colorado.edu"
__status__ = "Production"

from data_access_connections import data_access_factory
from enums import ServerConfig
import os
data_access = data_access_factory(ServerConfig.data_access_type)
from select_metadata import public_cols_to_dict,unique_cols_to_select_box_str,\
                            get_otu_table,get_table_col_values_from_form
from enums import FieldGrouping
from qiime.util import (compute_seqs_per_library_stats, 
    parse_command_line_parameters, get_options_lookup, 
    median_absolute_deviation, guess_even_sampling_depth)

from qiime.alpha_diversity import list_known_metrics
alpha_metrics=list_known_metrics();
from qiime.sort import natsort_case_insensitive
from qiime.beta_diversity import list_known_metrics
beta_metrics=list_known_metrics();


# set the help image location
help_img="./img/help_icon.png"

# get a list of public columns - NOT USED
# public_columns=data_access.getPublicColumns(sess['web_app_user_id'])
form_data=sess['form']

# get column headers
column_headers=[]
column_headers.append('SampleID')
column_headers.append('LinkerPrimerSequence')
column_headers.append('BarcodeSequence')
#write the form data to be used for seq/sample summary
req.write('<form onsubmit="return false;" id="otu_table_info">')
for i in form_data:
    if i=='contains_seqs':
        contains_seqs=form_data[i]
        req.write("<script type='text/javascript'>var contains_seqs='%s'</script>" % (contains_seqs))
    elif i != 'page':
        column_head=i.split('####STUDIES####')[0].split('####SEP####')[1]
        if column_head not in ['sample_name','PRIMER','LINKER','BARCODE']:
            column_headers.append(column_head)
        req.write('<input type="hidden" id="%s" value="%s" \>' % \
                                                            (i,form_data[i]))
req.write('</form>')

user_id=int(sess['web_app_user_id'])
meta_id=sess['meta_analysis_id']

# sort column headers
column_headers=natsort_case_insensitive(column_headers)

def create_options(script_name,column_headers,help_img):
    from html_from_script import get_html
    required,optional=get_html(script_name+'.py',column_headers,help_img)
    html_options_output=''
    if required != "":
        html_options_output+='<p><b>Required</b>&nbsp;(%s.py)</p><div id="%s_required" class="required"><table>%s</table></div>' % (script_name,script_name,required)

    if optional != "":
        html_options_output+='<a href="javascript:show_hide_optional(\'%s\')"><img src="./img/toggle-small-expand.png" id="%s_icon"\> Optional Parameters </a>(%s.py)<br>'% (script_name,script_name,script_name)
        html_options_output+='<div id="%s" class="optional" style="display:none;valign:top">' % (script_name)
        html_options_output+='<table>%s</table>' % (optional)
        html_options_output+='</div>'
    
    return html_options_output

%>

<script src="js/overlib.js" type="text/javascript" ></script>
<script src="select_metadata/jquery-1.3.2.js" type="text/javascript"></script> 
<script src="select_metadata/jQuery.dualListBox-1.2.js" type="text/javascript"></script> 
<script src="select_metadata/metadata_selection.js" type="text/javascript" ></script>
<script type="text/javascript" src="./js/jquery_validate/lib/jquery.metadata.js"></script>
<script type="text/javascript" src="./js/jquery_validate/jquery.validate.js"></script>
<script language="javascript" type="text/javascript"> 
    /*
    $.metadata.setType("attr","validate");
    $(document).ready(function(){
        $("#meta_analysis_params").validate({
        rules: {
            fname_prefix: {
                required: true,
            },
         },
        });
    });
    
    */
    
    window.onload=$(function() {$.configureBoxes();});

    var savedValues=new Array();
    
    function check_int_range_0_100000000(input_id){
        //this function takes an input box id and identifies if the number
        //is between a certain threshold. when null returns the value 0
        var val=parseInt(document.getElementById(input_id).value);
        if (isNaN(val) || val==''){
            val=0;
        }else if(val<0 || val>100000000){
            alert('The ' + input_id + 
                  ' threshold must be an integer between 0 and 100000000!');
            return 'false';
        }
        return val;
    }
    
    function check_float_range_0_100000000(input_id){
        //this function takes an input box id and identifies if the number
        //is between a certain threshold. when null returns the value 0
        var val=parseFloat(document.getElementById(input_id).value);
        if (isNaN(val) || val==''){
            val=0;
        }else if(val<0 || val>100000000){
            alert('The ' + input_id + 
                  ' threshold must be an integer between 0 and 100000000!');
            return 'false';
        }
        return val;
    }
    
    function check_float_range_0_1(input_id){
        //this function takes an input box id and identifies if the number
        //is between a certain threshold. when null returns the value 0
        var val=parseFloat(document.getElementById(input_id).value);
        if (isNaN(val) || val==''){
            val=0.75;
        }else if(val<0 || val>100000000){
            alert('The ' + input_id + 
                  ' threshold must be an integer between 0 and 100000000!');
            return 'false';
        }
        return val;
    }

    function get_select_box_values(input_id){
        //this function takes a select-box id and returns a list of selected 
        //values
        var vals=document.getElementById(input_id).options;
        var vals_to_use=new Array();
        var iterator=0;
        for (var i=0,il=vals.length;i<il;i++){
            if (vals[i].selected){
                vals_to_use[iterator]=vals[i].value;
                iterator++;
            }
        }
        return vals_to_use;
    }
    
    /* 
       Following function was adapted from: 
       http://rickyrosario.com/blog/javascript-startswith-and-endswith-implementation-for-strings/
    */
    function strStartsWith(str, prefix) {
        return str.indexOf(prefix) === 0;
    }
    function post_Array() {
    
        pms=document.getElementById('meta_analysis_params');

        //this function pulls all the values from the form and writes them
        //as hidden form values to be submitted to the processing script
        
        var form_object=document.getElementById("metadata_submission") 
        var jobs_to_start=new Array();

        
        test=''
        for (var i=0,il=pms.length;i<il;i++){
            var script=pms[i].id.split(':')[0]
            if (strStartsWith(script,'check_')){
                var split_script=script.split('_')
                if (document.getElementById(script).checked){
                    jobs_to_start.push(split_script.slice(1,split_script.length).join('_'))
                }
            }else if (script=='combine_columns' || pms[i].type=='button'){
                //do nothing
            }else if (script=='fname_prefix'){
                form_object.innerHTML+='<input type="hidden" name="'+script+'" value="'+pms[i].value+'">'
            }else if (script=='bdiv_rarefied_at' || script=='otutable_rarefied_at'){
                var rarefied_at=check_int_range_0_100000000(pms[i].id);
                if (rarefied_at != 'false'){
                    form_object.innerHTML+='<input type="hidden" name="'+script+'" value="'+rarefied_at+'">'
                }else if (otutable_rarefied_at == 'false'){
                    return false;
                }
            }else if (script=='taxonomy'){
                var taxonomy_class=document.getElementById("taxonomy").value;
                form_object.innerHTML+='<input type="hidden" name="taxonomy" value="'+taxonomy_class+'">'
            }else if (script=='serial_or_parallel'){
                var serial_or_parallel_value=document.getElementById("serial_or_parallel").value;
                form_object.innerHTML+='<input type="hidden" name="serial_or_parallel:method" value="'+serial_or_parallel_value+'">'
            }else if (pms[i].type=='select-one' || pms[i].type=='select-multiple'){
                var selections=get_select_box_values(pms[i].id);
                if (selections.join() != ''){
                    form_object.innerHTML+='<input type="hidden" name="'+pms[i].id+'" value="'+selections.join()+'">';
                }
            }else if (pms[i].type=='text'){
                if (pms[i].className=='float' && pms[i].value!=''){
                    var float=check_float_range_0_100000000(pms[i].id);
                    if (float != 'false' && float != 0){
                        form_object.innerHTML=form_object.innerHTML+'<input type="hidden" name="'+pms[i].id+'" value="'+float+'">'
                    }else if (float == 'false'){
                        return false;
                    }
                }else if (pms[i].className=='int' && pms[i].value!=''){
                    var integer=check_int_range_0_100000000(pms[i].id);
                    if (integer != 'false' && integer != 0){
                        form_object.innerHTML=form_object.innerHTML+'<input type="hidden" name="'+pms[i].id+'" value="'+integer+'">'
                    }else if (integer == 'false'){
                        return false;
                    }
                }else if (pms[i].value!=''){
                    form_object.innerHTML=form_object.innerHTML+'<input type="hidden" name="'+pms[i].id+'" value="'+pms[i].value+'">'
                }
            
            }else if (pms[i].type=='checkbox'){
                if (pms[i].checked){
                    form_object.innerHTML=form_object.innerHTML+'<input type="hidden" name="'+pms[i].id+'" value="True">'
                }
            }else{
                alert(pms[i].type);
            }
        }
        
        form_object.innerHTML=form_object.innerHTML+'<input type="hidden" name="jobs_to_start" value="'+jobs_to_start.join()+'">'

        return true;
    }
    function show_hide_div(check_id,div_id){
        checkbox_to_show_hide=document.getElementById(check_id)
        div_to_show_hide=document.getElementById(div_id)
        if (checkbox_to_show_hide.checked){
            div_to_show_hide.style.display='';
        }else{
            div_to_show_hide.style.display='none';
        }
    }
    
    function show_hide_optional(div_id){
        div_to_show_hide=document.getElementById(div_id)
        icon_to_change=document.getElementById(div_id+'_icon')
        if (div_to_show_hide.style.display==''){
            div_to_show_hide.style.display='none';
            icon_to_change.src='./img/toggle-small-expand.png';
        }else{
            div_to_show_hide.style.display='';
            icon_to_change.src='./img/toggle-small.png';
        }
    }
    
    function combine_mapping_categories(){
        // this function takes an the categories from the combine_columns 
        // select-box and merges them in the lists on the page
        var selections=get_select_box_values('combine_columns');
        if (selections.length > 1){
            value=selections.join('_and_')
            add_select_option("summarize_otu_by_cat:mapping_category",value,false)
            add_select_option("make_rarefaction_plots:colorby",value,false)
            add_select_option("make_2d_plots:colorby",value,false)
            add_select_option("make_3d_plots:colorby",value,false)
            add_select_option("sort_otu_table:sort_field",value,false)
            add_select_option("combine_metadata:columns",value,true)
            
            
        }
    }
    
    function add_select_option(select_id,text, is_selected){
        // this function inserts an option to a select-box
        var optn = document.createElement("OPTION");
        optn.text = value;
        if (is_selected){
            optn.selected=true;
        }
        
        var select_box_to_update=document.getElementById(select_id)
        select_box_to_update.options.add(optn);
        
        return;
    }
    
</script>
<link rel="stylesheet" href="./style/select_metadata_styles.css" type="text/css">

<!-- 
This form contains the input box for the list of terms, along with
the list of ontologies and function buttons.

Onsubmit returns false, since the form is not formally submitted and
it will remove the return key functionality.

<script>
    /* use AJAX to load the seq/sample stats */
    getStats(document.forms);
</script>

<table class='stats' id='field_ref_table' class="column_values" bgcolor="#C0C0C0">
    <tr><th>Loading Stats...</th></th>
</table>
-->
<form id="meta_analysis_params" name="meta_analysis_params" onsubmit="return false;">

<%
if contains_seqs=='false':
    req.write('<input type="hidden" id="otutable_rarefied_at" name="otutable_rarefied_at" />')
    req.write('<input type="hidden" id="fname_prefix" name="fname_prefix" value="meta_analysis"/>')
    req.write('<select id="taxonomy" name="taxonomy" style="display:none"><option selected>PHPR</select>')
else:
    #
%>
<h3>Meta-Analyses to Perform</h3>
<input type="hidden" id="fname_prefix" name="fname_prefix" value="meta_analysis"/>

<input type="checkbox" checked disabled><b>&nbsp;Select Processing Method:</b>
    <select id="serial_or_parallel" name="serial_or_parallel">
        <option selected>Serial
        <option>Parallel
    </select>
</input>
<br>
<br>

<input type="checkbox" checked disabled \><b>&nbsp;OTU Table</b><br>
<a href="javascript:show_hide_optional('tax_assignment')"><img src="./img/toggle-small-expand.png" id="tax_assignment_icon"\> Optional Parameters </a>(taxonomy assignment and rarefaction)<br>

<div id='tax_assignment' class="optional" style="display:none;valign:top">
    <table>
    <tr><td><b>Select Taxonomy: </b></td>
    <td>
        <select id="taxonomy" name="taxonomy">
            <option>G2_chip
            <option>Hugenholtz
            <option>Ludwig
            <option>NCBI
            <option>Pace
            <option selected>PHPR
            <option>RDP
        </select>
    </td></tr>
    <tr><td><b>Rarefied at: </b></td>
    <td><input type='text' id="otutable_rarefied_at" name="otutable_rarefied_at" /></td>
    </tr>
    </table>
</div>
<a href="javascript:show_hide_optional('combine_samples')"><img src="./img/toggle-small-expand.png" id="combine_samples_icon"\> Optional Parameters </a>(Combine Mapping Categories)<br>

<div id='combine_samples' class="optional" style="display:none;valign:top">
    <table>
    <tr><td><b>Select Categories: </b></td>
    <td align="left">
    <select id="combine_columns" name="combine_columns" multiple>
<%
    for i in column_headers:
        req.write('<option>%s\n' % (i))
    #
%>
    </select>
    </td>
    <td align="left"><input type='button' id='combine_columns_button' onclick="combine_mapping_categories()" value="Combine Categories" \>
    </td>
    </tr>
    <tr><td colspan="3"><i>Note: all combined columns will appear at the end of the select-boxes containing categories</i></td></tr>
    </table>
    <table><tr><td><h5>Combined Columns:</h5></td><td><select id="combine_metadata:columns" name="combine_metadata:columns" multiple disabled></select></td></tr></table>
</div>
<br>
<b><input type='checkbox' id='check_showTE'>&nbsp;TopiaryExplorer Visualization</input></b>
<br>
<br>
<b><input type='checkbox' id='check_heatmap' onclick='show_hide_div(this.id,"heatmap_div")'>&nbsp;Heatmap</input></b>
<br>
<div id='heatmap_div' style='display:none;valign:top'>
<%
    script_name='make_otu_heatmap_html'
    req.write(create_options(script_name,column_headers,help_img))
%>
</div>
<br>
<!-- define Taxa Summary-->
<b><input type='checkbox' id='check_sumtaxa' onclick='show_hide_div(this.id,"sumtaxa_div")'>&nbsp;Taxonomy Summary</input></b>
<br>
<div id='sumtaxa_div' style='display:none;valign:top'>
<b>&nbsp;&nbsp;<input type='checkbox' id='check_sumcat' onclick='show_hide_div(this.id,"sumcat_div")'>&nbsp;Summarize OTU by Category</input></b>
<br>
<div id='sumcat_div' style='display:none;valign:top'>
<%
    script_name='summarize_otu_by_cat'
    req.write(create_options(script_name,column_headers,help_img))

    req.write('</div><br>')
    
    script_name='sort_otu_table'
    req.write(create_options(script_name,column_headers,help_img))
    
    script_name='summarize_taxa'
    req.write(create_options(script_name,column_headers,help_img))

    script_name='plot_taxa_summary'
    req.write(create_options(script_name,column_headers,help_img))
%>
</div>
<br>
<!-- define Alpha-Diversity and Rarefaction plots-->
<b><input type='checkbox' id='check_arare' onclick='show_hide_div(this.id,"arare_div")'>&nbsp;Alpha-Diversity</input></b>
<br>
<div id='arare_div' style='display:none;valign:top'>
<%
    script_name='multiple_rarefactions'
    req.write(create_options(script_name,column_headers,help_img))

    script_name='alpha_diversity'
    req.write(create_options(script_name,column_headers,help_img))

    script_name='make_rarefaction_plots'
    req.write(create_options(script_name,column_headers,help_img))
%>
</div>
<br>
<b><input type='checkbox' id='check_bdiv' onclick='show_hide_div(this.id,"beta_div")'>&nbsp;Beta-Diversity</input></b>
<br><br>
<div id='beta_div' style='display:none;valign:top'>


<%
    req.write('<a href="javascript:show_hide_optional(\'beta_rarefaction\')"><img src="./img/toggle-small-expand.png" id="beta_rarefaction_icon"\> Optional Parameters </a>(rarefaction.py)<br>')
    req.write('<div id="beta_rarefaction" class="optional" style="display:none;valign:top">')
    req.write('<table><tr><td><b>Rarefied at: </b></td><td><input type="text" id="bdiv_rarefied_at" name="bdiv_rarefied_at" /><em style="color:gray">(default: use OTU table parameters)</em></td></tr></table>')
    req.write('</div>')

    script_name='beta_diversity'
    req.write(create_options(script_name,column_headers,help_img))
%>
<br>
<b>Visualizations:</b><br><b><input type='checkbox' id='check_2d_bdiv_plots' onclick='show_hide_div(this.id,"2d_plots")'>&nbsp;2D PCoA Plots</input></b>
<div id='2d_plots' style='display:none;valign:top'>
<%
    script_name='make_2d_plots'
    req.write(create_options(script_name,column_headers,help_img))
    req.write('</div><br>')
%>
<b><input type='checkbox' id='check_3d_bdiv_plots' onclick='show_hide_div(this.id,"3d_plots")'>&nbsp;3D PCoA Plots</input></b>
<div id='3d_plots' style='display:none;valign:top'>
<%
    script_name='make_3d_plots'
    req.write(create_options(script_name,column_headers,help_img))
    req.write('</div><br>')
%>
<b><input type='checkbox' id='check_disthist_bdiv_plots' onclick='show_hide_div(this.id,"dist_hist")'>&nbsp;Distance Histograms</input></b>
<div id='dist_hist' style='display:none;valign:top'>
<%
    script_name='make_distance_histograms'
    req.write(create_options(script_name,column_headers,help_img))
    req.write('</div><br>')
%>

</div>
<br>

<br>
<!-- 
    The following table is where we will be dynamically writing
    the results.
-->
<%
#
%>
</form>

<form id="metadata_submission" onsubmit="return post_Array()" method="post" action="select_metadata/submit_meta_analyses.psp">
<%
for i in form_data:
    if i != 'page':
        req.write('<input type="hidden" name="%s" value="%s" />' % (i,form_data[i]));
#
if contains_seqs=='true':
    req.write('<input type="submit" />')
#
%>

</form>
<script type="text/javascript">
    if (contains_seqs=='false'){
        post_Array()
        document.forms["metadata_submission"].submit();
    }
    
</script>