<%
#!/usr/bin/env python

__author__ = "Doug Wendel"
__copyright__ = "Copyright 2010, Qiime Web Analysis"
__credits__ = ["Doug Wendel"]
__license__ = "GPL"
__version__ = "1.0.0.dev"
__maintainer__ = ["Doug Wendel"]
__email__ = "wendel@colorado.edu"
__status__ = "Development"


from data_access_connections import data_access_factory
from enums import ServerConfig,DataAccessType
import os
from enums import FieldGrouping
from qiime.parse import parse_mapping_file


# Set variables
zoom_level = 4

# center of US
center_lat = 39.83389
center_long = -99.89150999999998

# our lab
#center_lat = 49.26123
#center_long = -123.1139299
tiny_markers = False
portal_type = 'americangut'

# Data Access
data_access = data_access_factory(ServerConfig.data_access_type)
ag_data_access = data_access_factory(ServerConfig.data_access_type,
    'american_gut')

# Session variables
sess = Session.Session(req)

if 'username' in sess:
    psp.redirect('logout.psp')

sess['portal_type'] = portal_type
sess['document_root'] = req.document_root() + '/americangut/'
sess['resources'] = {}
sess['resources']['barcode_images_fp'] = os.path.join('img', 'barcodes')

sess.set_timeout(604800)
sess.save()


%>

<!DOCTYPE html>
<html lang="en"> 
<head>
<meta charset="utf-8">
<title>American Gut</title>
<link rel="stylesheet" type="text/css" href="style/americangut.css">

<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>
<script type="text/javascript" src="/qiime/js/qiime.js"></script>
<script type="text/javascript" src="/qiime/js/jquery_validate/lib/jquery.js"></script>
<script type="text/javascript" src="/qiime/js/jquery_validate/lib/jquery.metadata.js"></script>
<script type="text/javascript" src="/qiime/js/jquery_validate/jquery.validate.js"></script>
<script type="text/javascript" src="http://code.jquery.com/jquery-latest.js"></script> 
<script type="text/javascript"> 
$(document).ready(function(){

    $("ul.subnav").parent().append("<span></span>"); //Only shows drop down trigger when js is enabled - Adds empty span tag after ul.subnav
    
    $("ul.topnav li span").click(function() { //When trigger is clicked...
        
        //Following events are applied to the subnav itself (moving subnav up and down)
        $(this).parent().find("ul.subnav").slideDown('fast').show(); //Drop down the subnav on click

        $(this).parent().hover(function() {
        }, function(){  
            $(this).parent().find("ul.subnav").slideUp('slow'); //When the mouse hovers out of the subnav, move it back up
        });

        //Following events are applied to the trigger (Hover events for the trigger)
        }).hover(function() { 
            $(this).addClass("subhover"); //On hover over, add class "subhover"
        }, function(){  //On Hover Out
            $(this).removeClass("subhover"); //On hover out, remove class "subhover"
    });

});

function toggleSection(section_name)
{
    div = document.getElementById(section_name);
    header_name = section_name + '_header';
    if (div.style.display == 'none')
    {
        $('#' + section_name).fadeIn('fast')
        header_content = $('#' + header_name)[0].innerHTML
        $('#' + header_name)[0].innerHTML = header_content.replace('+', '-');
        window.scrollBy(0, 200);
    }
    else
    {
        $('#' + section_name).fadeOut('fast')
        header_content = $('#' + header_name)[0].innerHTML
        $('#' + header_name)[0].innerHTML = header_content.replace('-', '+');
    }
}

function initialize() 
{
    var mapOptions = 
    {
<%
req.write('zoom: {0},'.format(zoom_level))
req.write('center: new google.maps.LatLng({0},{1}),'.format(center_lat, center_long))
# End if
%>        
        scrollwheel: false,
        mapTypeId: google.maps.MapTypeId.TERRAIN,
        mapTypeControl: false,
        streetViewControl: false,
        panControl: false
    };


    var stylez = [
        {
          featureType: "all",
          elementType: "all",
          stylers: [
            { saturation: -100 } // <-- THIS
          ]
        }
    ];

    var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

    var mapType = new google.maps.StyledMapType(stylez, { name:"Grayscale" });    
    map.mapTypes.set('tehgrayz', mapType);
    map.setMapTypeId('tehgrayz');

    setMarkers(map, latlongs_db);
}

function setMarkers(map, locations) 
{
    for (var i = 0; i < locations.length; i++) 
    {
        var loc = locations[i];
        var myLatLng = new google.maps.LatLng(loc[1], loc[2]);
        
<%
if tiny_markers:
    # Indent
%>        
        var marker = new google.maps.Marker({
          position:myLatLng,
          map: map,
          clickable: false,
          size:(10, 10),
          color:"00ff00",
          icon:'/qiime/img/blue_tiny.png'
        });
<%
else:
    # Indent
%>
        var pinColor = loc[4];
        var pinImage = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=wc-male|" + pinColor,
            new google.maps.Size(21, 34),
            new google.maps.Point(0,0),
            new google.maps.Point(10, 34));
        var pinShadow = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_shadow",
            new google.maps.Size(40, 37),
            new google.maps.Point(0, 0),
            new google.maps.Point(12, 35));

        var marker = new google.maps.Marker({
            position: myLatLng, 
            map: map,
            icon: pinImage,
            shadow: pinShadow
        });

<%
# End if
%>

        
    }
}
</script>

<%
# Write out the database of points
req.write('<script type="text/javascript">')
req.write('var latlongs_db = [')

result_list=[]
public_studies = data_access.getUserAndPublicStudyNames(12169, 1, portal_type)

statement = """
select  'zip: ' || z.zipcode, z.latitude, z.longitude,
        case
            -- First case: all samples entered for kit (complete), meaning
            -- count of barcodes = count of barcodes filled out:
            when
            (
                select  count(*)
                from    ag_kit_barcodes akb
                        inner join ag_kit ak
                        on akb.ag_kit_id = ak.ag_kit_id
                where   ak.ag_login_id = agl.ag_login_id
            ) =
            (
                select  count(*)
                from    ag_kit_barcodes akb
                        inner join ag_kit ak
                        on akb.ag_kit_id = ak.ag_kit_id
                where   ak.ag_login_id = agl.ag_login_id
                        and akb.site_sampled is not null
            ) 
            then '00FF00'
            -- Second case: Kit has been verified:
            when 
            (
                select  count(*)
                from    ag_kit ak
                where   ak.ag_login_id = agl.ag_login_id
                        and kit_verified = 'y'
            ) > 0 then 'FFFF00'
            -- Otherwise, kit not verified yet:
            else '00B2FF'
        end as marker_color,
        case
            -- First case: all samples entered for kit (complete), meaning
            -- count of barcodes = count of barcodes filled out:
            when
            (
                select  count(*)
                from    ag_kit_barcodes akb
                        inner join ag_kit ak
                        on akb.ag_kit_id = ak.ag_kit_id
                where   ak.ag_login_id = agl.ag_login_id
            ) =
            (
                select  count(*)
                from    ag_kit_barcodes akb
                        inner join ag_kit ak
                        on akb.ag_kit_id = ak.ag_kit_id
                where   ak.ag_login_id = agl.ag_login_id
                        and akb.site_sampled is not null
            ) then 0
            -- Second case: Kit has been verified:
            when 
            (
                select  count(*)
                from    ag_kit ak
                where   ak.ag_login_id = agl.ag_login_id
                        and kit_verified = 'y'
            ) > 0 
            then 1
            -- Otherwise, kit not verified yet:
            else 2
        end as order_by
from    ag_login agl
        inner join zipcodes z
        on agl.zip = z.zipcode
order by order_by
"""

con = data_access.getMetadataDatabaseConnection()
results = con.cursor().execute(statement)

for i, val in enumerate(results):
    if val[0] and val[1] and val[2]:
        study_alias = str(val[0]).replace("'", "\\'")
        result_list.append("\n['{0}',{1},{2},{3},'{4}']".format(study_alias, val[1], val[2], str(i+1), val[3]))

req.write('%s];' % ','.join(result_list))
req.write('window.onload=initialize;</script>')
%>

</head>

<body>
    <div style="width:100%; height:100%; background-color:#000;">
    <div id="map_canvas" style="width:100%; height:100%; opacity:0.7;"></div>
    </div>

	<div class="wrapper clearfix" style="position:absolute; top:10px; left:50px; opacity:0.9;">
        <div class="header clearfix">
            <img id="logo" src="img/ag_logo.jpg">
		</div>
    </div>
    <div class="wrapper clearfix" style="position:absolute; top:120px; left:50px; opacity:0.9; width:260px;">
		<br>
		<div class="left menuwrapper" style="width:100%;">
			<ul class="menu">
				<li><a href="http://www.indiegogo.com/projects/american-gut"><img class="icon" src="/qiime/img/purchase_icon.png">Join the Project!</a></li>
				<li><a href="http://americangut.org"><img class="icon" src="/qiime/img/what_icon.png">What is American Gut?</a></li>
			</ul>

<%
# This is the location where the user directories are written
environment_vars=req.get_options()
output_dir='%s/user_data' % environment_vars['HOME']
link_path_dir = 'studies'
if form.has_key('username'):
    user_data = ag_data_access.authenticateWebAppUser(form["username"], form["password"])
    if (user_data):
        sess['user_data'] = user_data
        sess['username'] = user_data['name']
        sess['supplied_kit_id'] = form["username"]
        sess.save()
        url = 'fusebox.psp?page=portal.psp'
        req.write('<script language=\"javascript\">window.location="{0}";</script>'.format(url))
    else:
        req.write("<p style='color:#FF0000;'>Invalid username/password.</p>")

# end

%>

        <!-- Login form div -->
        <div>
            <h3 style="margin-left:5px;">Participant Log In</h3>
            <table width="100%">
                <tr width="100%">
                    <td width="30%"></td>
                    <td width="30%">
                        <form method="post" action="index.psp">
                            <table width="100%">
                            	<tr><td>Kit ID</td><td><input type="text" id="username" name="username"></td></tr>
                            	<tr><td>Password</td><td><input type="password" id="password" name="password"></td></tr>
                            	<tr><td colspan="2"><input type="submit" value="Log In"></tr>
                                <tr><td colspan="2"><a href="mailto:americangut@gmail.com?subject=AGLOGINHELP&body=Please%20add%20your%20KitID%20and%20any%20other%20relevant%20information" class="small_link">I'm having trouble logging in...</a></td></tr>
                            </table>
                        </form>
                    </td>
                    <td width="30%"></td>
                </tr>
            </table>
        </div>
        <!-- End login form div -->

    </div>

<%@ include file="footer.psp"%>
