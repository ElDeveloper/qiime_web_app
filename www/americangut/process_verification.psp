<%
__author__ = "Meg Pirrung"
__copyright__ = "Copyright 2009-2013, QIIME Web Analysis"
__credits__ = ["Meg Pirrung", "Adam Robbins-Pianka", "Yoshiki Vazquez-Baeza"]
__license__ = "GPL"
__version__ = "1.0.0.dev"
__maintainer__ = ["Meg Pirrung"]
__email__ = "meganap@gmail.com <mailto:meganap@gmail.com>"
__status__ = "Development"

from data_access_connections import data_access_factory
from enums import ServerConfig,DataAccessType

sess = Session.Session(req)

# Data Access
data_access = data_access_factory(ServerConfig.data_access_type)
ag_data_access = data_access_factory(ServerConfig.data_access_type,
    'american_gut')

# convenience variables
ag_login_id = sess['user_data']['web_app_user_id']
barcodes_fp = sess['resources']['barcode_images_fp']

# form is not a dict, we want it as a dict
form_dict = dict(form)

verification_code = form_dict['email_verification_code']
supplied_kit_id = form_dict['supplied_kit_id']

query = ("select kit_verification_code from ag_kit "
         "where supplied_kit_id = '%s'" % supplied_kit_id)

# store accurate matches to update them into the db and inaccurate ones
# to notify the user that there might be something wrong goin on 
try:
    db_code = ag_data_access.dynamicMetadataSelect(query).next()
    db_code = db_code[0]
except StopIteration:
    db_code = False

# useful information for e-mail help incase needed
sess['troubleshooting']['email_verification_code'] = verification_code
sess.save()

if db_code == verification_code:
    ag_data_access.verifyKit(supplied_kit_id)
    psp.redirect('fusebox.psp?page=portal.psp')
else:
    sess['error_code'] = 1
    sess.save()
    psp.redirect('fusebox.psp?page=error.psp')
%>
