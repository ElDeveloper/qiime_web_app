<%
__author__ = "Jesse Stombaugh"
__copyright__ = "Copyright 2009-2010, Qiime Web Analysis"
__credits__ = ["Jesse Stombaugh"]
__license__ = "GPL"
__version__ = "1.0.0.dev"
__maintainer__ = ["Doug Wendel"]
__email__ = "jesse.stombaugh@colorado.edu"
__status__ = "Production"

"""
This script is the upload handler for uploading the SFF files using JumpLoader'
"""

import os
import zipfile
from subprocess import PIPE,Popen
from qiime_data_access import QiimeDataAccess
data_access = QiimeDataAccess()

#determine if a file has been passed
if form.has_key('file') and form['file'].filename:
    try: # Windows needs stdio set for binary mode.
        import msvcrt
        msvcrt.setmode (0, os.O_BINARY) # stdin  = 0
        msvcrt.setmode (1, os.O_BINARY) # stdout = 1
    except ImportError:
        pass

    # A nested FieldStorage instance holds the file
    fileitem = form['file']
    
    # Test if the file was uploaded
    if fileitem.filename:
        # strip leading path from file name to avoid directory traversal attacks
        fname=form['output_fname']+fileitem.filename.strip().replace(" ","")
        dir_path =os.path.join(os.path.dirname(req.filename), form['output_dir'])
        
        # write the zipped file on the server
        zippedf = open(os.path.join(dir_path, fname), 'wb')
        zippedf.write(fileitem.file.read())
        zippedf.close()
    
        # create a zipfile object
        t=zipfile.ZipFile(os.path.join(dir_path, fname),'r')
        
        contains_sff = False
        # iterate through the list of files in the zipped file
        for f in t.namelist():
            
            # if the name is a folder, create a directory
            if not f.endswith('/'):
                # Write a file
                filename=os.path.split(f)[-1].lower()
                if filename.endswith('.sff') and not filename.startswith('.'):
                    outfname=os.path.join(dir_path, filename)
                    outfile = open(outfname, 'wb')
                    outfile.write(t.read(f))
                    outfile.flush()
                    outfile.close()
                    
                    # determine if the file written is an sff, in which the sffinfo
                    # is called on the file.
                    contains_sff = True
                    try: 
                        process=Popen(['sffinfo', '-m', outfname], stdout=PIPE, shell=False)
                        if not int(process.wait())==0:
                            req.write("Error: the SFF file could not be parsed!")
                        data_access.updateSFFFlag(form['study_id'], 'y')
                    except:
                        req.write("Error: there was a problem parsing the SFF and/or inserting job in the queue!")
                        
        #if the zip does not have any sff files, raise an error
        if contains_sff==False:
            req.write("Error: This zip does not contain any SFF files!")

#
%>
